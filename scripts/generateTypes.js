// Using ES modules syntax
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { compile } from 'json-schema-to-typescript';
import { createRequire } from 'module';

const require = createRequire(import.meta.url);
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Path to the JSON Resume schema
const schemaPath = path.resolve(__dirname, '../node_modules/@jsonresume/schema/schema.json');
const schema = require(schemaPath);

// Generate TypeScript interfaces from the schema
compile(schema, 'ResumeSchema', {
  bannerComment: '// Types generated from @jsonresume/schema\n// Do not edit this file manually',
  style: {
    singleQuote: true,
  },
})
  .then(ts => {
    // Create the resume types file
    const typesDir = path.resolve(__dirname, '../src/types');

    // Ensure the directory exists
    if (!fs.existsSync(typesDir)) {
      fs.mkdirSync(typesDir, { recursive: true });
    }

    // Write the main interface
    const outputPath = path.resolve(typesDir, 'resumeSchema.ts');
    fs.writeFileSync(outputPath, ts);
    console.log(`✅ TypeScript interfaces generated at ${outputPath}`);

    // Create the resume.ts file with our type aliases
    const resumeTypesPath = path.resolve(typesDir, 'resume.ts');

    // Only create the file if it doesn't exist yet to avoid overwriting customizations
    if (!fs.existsSync(resumeTypesPath)) {
      const resumeTypes = `// Import generated schema
import { ResumeSchema } from './resumeSchema';

// Basic types from schema
export type Resume = ResumeSchema;
export type Basics = NonNullable<Resume['basics']>;

// Extract base types from the schema
type BaseWork = NonNullable<Resume['work']>[number];
type BaseEducation = NonNullable<Resume['education']>[number];
type BaseAward = NonNullable<Resume['awards']>[number];
type BaseCertificate = NonNullable<Resume['certificates']>[number];
type BaseInterest = NonNullable<Resume['interests']>[number];
type BaseLanguage = NonNullable<Resume['languages']>[number];
type BaseProject = NonNullable<Resume['projects']>[number];
type BasePublication = NonNullable<Resume['publications']>[number];
type BaseReference = NonNullable<Resume['references']>[number];
type BaseSkill = NonNullable<Resume['skills']>[number];
type BaseVolunteer = NonNullable<Resume['volunteer']>[number];

// Extended types with custom fields
export interface Work extends BaseWork {
  keywords?: string[]; // Add support for keywords in work experiences
}

// Export remaining types without modifications
export type Education = BaseEducation;
export type Award = BaseAward;
export type Certificate = BaseCertificate;
export type Interest = BaseInterest;
export type Language = BaseLanguage;
export type Project = BaseProject;
export type Publication = BasePublication;
export type Reference = BaseReference;
export type Skill = BaseSkill;
export type Volunteer = BaseVolunteer;
`;
      fs.writeFileSync(resumeTypesPath, resumeTypes);
      console.log(`✅ Resume type aliases generated at ${resumeTypesPath}`);
    } else {
      console.log(
        `ℹ️ File ${resumeTypesPath} already exists, skipping to preserve customizations.`
      );
    }
  })
  .catch(error => {
    console.error('Error generating TypeScript interfaces:', error);
    process.exit(1);
  });
